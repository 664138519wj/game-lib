package  ${pack};

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;

import org.springframework.jdbc.core.RowMapper;

import io.grass.core.dao.EntityObject;
import io.grass.core.dao.KeyObject;
#if($t.hasDateColumns)
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
#end
public class ${t.className}DO  extends EntityObject{
	private static final long serialVersionUID = ${t.serialVersionUID}L;
#foreach(${c} in ${t.allColumns})
#if($c.dateColumn)
	private java.util.Date ${c.fieldName};
#else
#if($c.objectType!=0 and not $c.nullable)
	private ${c.className} ${c.fieldName} = new ${c.className}();
#else
	private ${c.className} ${c.fieldName};
#end
#end
#end

	public static class Key implements KeyObject{
##构造函数
		public Key() {
   		}
		public Key(#foreach(${c} in ${t.keyColumns})#if($velocityCount != 1),#end${c.className} ${c.fieldName}#end) {
#foreach(${c} in ${t.keyColumns})
			this.${c.fieldName} = ${c.fieldName};
#end
		}
#foreach(${c} in ${t.keyColumns})
		private ${c.className} ${c.fieldName};
#end
#foreach(${c} in ${t.keyColumns})
		public ${c.className} ${c.getName}() {
			return ${c.fieldName};
		}
		public void ${c.setName}(${c.className} ${c.fieldName}) {
			this.${c.fieldName} = ${c.fieldName};
		}
#end
		@Override public String getUpdatePartialPrefixSql(){
			return "${sql.toUpdatePartialPrefix($t)}";
		}
		@Override public String getWhereByKeySql(){
			return "${sql.toWhereByKey($t)}";
		}
		@Override public String getDeleteSql(){
			return "${sql.toDelete($t)}";
		}
		@Override public int setPreparedStatement(PreparedStatement ps ,int i)  throws SQLException{
#foreach(${c} in ${t.keyColumns})
			ps.setObject(i++, ${c.getName}());
#end
			return i;
		}
		@Override
		public String toString() {
			return "${t.className} [#foreach(${c} in ${t.keyColumns})#if($velocityCount != 1)+",#end${c.fieldName}:"+ ${c.fieldName} #end+ "]";
		}
	}
	@Override
	public Key getKey() {
		return new Key() {
#foreach(${c} in ${t.keyColumns})
			public ${c.className} ${c.getName}() {
				return ${c.fieldName};
			}
			public void ${c.setName}(${c.className} ${c.fieldName}) {
				${t.className}DO.this.${c.fieldName}  = ${c.fieldName};
				${t.className}DO.this.changeProperty("${c.fieldName}",${c.fieldName});
			}
#end
			@Override
			public String toString() {
				return "${t.className} [#foreach(${c} in ${t.keyColumns})#if($velocityCount != 1)+",#end${c.fieldName}:"+ ${c.fieldName} #end+ "]";
			}
		};
	}
##构造函数
	public ${t.className}DO() {
    }
 #if($t.hasDateColumns)
 	public ${t.className}DO(#foreach(${c} in ${t.allColumns})#if(not ($c.objectType!=0 and not $c.nullable))#if($velocityCount != 1),#end${c.className} ${c.fieldName}#end#end) {
#foreach(${c} in ${t.allColumns})
 #if($c.dateColumn)
		this.${c.fieldName} = new java.util.Date(${c.fieldName});
#else
#if(not ($c.objectType!=0 and not $c.nullable))
		this.${c.fieldName} = ${c.fieldName};
#end
#end
#end
	}
	public ${t.className}DO(#foreach(${c} in ${t.allColumns})#if(not ($c.objectType!=0 and not $c.nullable))#if($velocityCount != 1),#end#if($c.dateColumn)java.util.Date ${c.fieldName}#else${c.className} ${c.fieldName}#end#end#end) {
#foreach(${c} in ${t.allColumns})
#if(not ($c.objectType!=0 and not $c.nullable))
		this.${c.fieldName} = ${c.fieldName};
#end
#end
	}
 #else
 	public ${t.className}DO(#foreach(${c} in ${t.allColumns})#if(not ($c.objectType!=0 and not $c.nullable))#if($velocityCount != 1),#end${c.className} ${c.fieldName}#end#end) {
#foreach(${c} in ${t.allColumns})
#if(not ($c.objectType!=0  and not $c.nullable))
		this.${c.fieldName} = ${c.fieldName};
#end
#end
	}
 #end

##get set函数
#foreach(${c} in ${t.allColumns})
#if ($c.remark&&$c.remark.length()>1)
	/**
	 * ${c.remark}
	 **/
#end
#if($c.dateColumn)
	@JsonProperty("${c.fieldName}")
	public ${c.className} ${c.getName}() {
		if(this.${c.fieldName}==null){
			return 0;
		}else{
			return ${c.fieldName}.getTime();
		}
	}
	@JsonProperty("${c.fieldName}")
	public void ${c.setName}(${c.className} ${c.fieldName}) {
		if(this.${c.fieldName}==null){
			this.${c.fieldName} = new java.util.Date(${c.fieldName});
		}else{
			this.${c.fieldName}.setTime(${c.fieldName});
		}
		changeProperty("${c.fieldName}",${c.fieldName});
	}
	@JsonIgnore
	public void ${c.setName}(java.util.Date ${c.fieldName}) {
		this.${c.fieldName} = ${c.fieldName};
		changeProperty("${c.fieldName}",${c.fieldName});
	}
	@JsonIgnore
	public java.util.Date ${c.getName}ByDate() {
		return ${c.fieldName};
	}
#else
	public ${c.className} ${c.getName}() {
		return ${c.fieldName};
	}
	public void ${c.setName}(${c.className} ${c.fieldName}) {
		this.${c.fieldName} = ${c.fieldName};
		changeProperty("${c.fieldName}",${c.fieldName});
	}
#end
#end
##end get set函数
	@Override
	public String toString() {
		return "${t.className} [#foreach(${c} in ${t.allColumns})#if($velocityCount != 1)+",#end${c.fieldName}:"+ ${c.fieldName} #end+ "]";
	}
	@Override public int setPreparedStatementKeys(PreparedStatement ps ,int i)  throws SQLException{
#foreach(${c} in ${t.keyColumns})
		ps.setObject(i++, ${c.getName()}());
#end
		return i;
	}
	@Override public int setPreparedStatement(PreparedStatement ps ,int i,boolean isSetUnique)  throws SQLException{
#foreach(${c} in ${t.allColumns})
#if($c.dateColumn)
##处理特殊类型
#if(not ${c.autoIncrement})
#if (${c.unique})
		if(isSetUnique){
			ps.setObject(i++, ${c.getName}());
		}
#else
		ps.setObject(i++, ${c.getName}());
#end
#end
##end处理特殊类型
#else
##处理普通类型
#if(not ${c.autoIncrement})
#if (${c.unique})
		if(isSetUnique){
			ps.setObject(i++, ${c.getName}());
		}
#else
#if($c.objectType ==1)
		if(${c.fieldName} != null){
			String ${c.fieldName}Str = io.grass.util.XmlUtils.serialize(${c.getName}());
			ps.setString(i++, ${c.fieldName}Str);
		}else{
			ps.setObject(i++, null);
		}
#elseif($c.objectType ==2)
		if(${c.getName}() != null){
			String ${c.fieldName}Str = io.grass.util.JsonUtils.serialize(${c.getName}());
			ps.setString(i++, ${c.fieldName}Str);
		}else{
			ps.setObject(i++, null);
		}
#else
		ps.setObject(i++, ${c.getName}());
#end
#end
#end
##end处理普通类型
#end
#end
		return i;
	}
	
	@Override public String getInsertSql(){
		return "${sql.toInsert($t)}";
	}
	@Override public String getFastInsertPrefixSql(){
		return "${sql.toInsertPrefix($t)}";
	}
	@Override public String getFastInsertValueItemSql(){
		return "${sql.toInsertValueItem($t)}";
	}
	@Override public String getUpdateSql(){
		return "${sql.toUpdateTable($t)}";
	}

	public final static String getSelectByKeySql(){
		return "${sql.toSelectByKey($t)}";
	}
	public final static String getSelectCountSql(){
		return "${sql.toSelectCount($t)}";
	}
	public final static String getFormatSelectSql(){
		return "${sql.toFormatSelectAll($t)}";
	}
	public final static String getFormatSelectPrefixSql(){
		return "${sql.toFormatSelectPrefix($t)}";
	}
	public final static String getSelectPrefixSql(){
		return "${sql.toSelectPrefix($t)}";
	}
	public final static String getOrderByIdDescSql(){
		return "${sql.toOrderBykey($t)}";
	}
	
	public final static  RowMapper<${t.className}DO> getRowMapper(){
		return new RowMapper<${t.className}DO>() {
			@Override
			public ${t.className}DO mapRow(ResultSet rs, int rowNum) throws SQLException {
				${t.className}DO o=new ${t.className}DO();
#foreach(${c} in ${t.allColumns})
#if($c.dateColumn)
				o.${c.fieldName} = new java.util.Date(rs.${c.resultGetMethod}("${c.dbName}"));
#else
#if($c.objectType ==1)
				String ${c.fieldName} = rs.${c.resultGetMethod}("${c.dbName}");
				if (io.grass.util.StringUtils.isNotEmpty(${c.fieldName})) {
					o.${c.fieldName} = io.grass.util.XmlUtils.deserialize(${c.fieldName});
				}else{
#if(not $c.nullable)
					o.${c.setName}(new ${c.className}());
#else
					o.${c.setName}(null);
#end
				}
#elseif($c.objectType ==2)
				String ${c.fieldName}Str = rs.${c.resultGetMethod}("${c.dbName}");
				if (io.grass.util.StringUtils.isNotEmpty(${c.fieldName}Str)) {
					o.${c.fieldName} =  io.grass.util.JsonUtils.deserialize(${c.fieldName}Str,new com.fasterxml.jackson.core.type.TypeReference<${c.className}>(){});
				}else{
#if(not $c.nullable)
					o.${c.setName}(new ${c.className}());
#else
					o.${c.setName}(null);
#end
				}
#else	
				o.${c.fieldName} = rs.${c.resultGetMethod}("${c.dbName}");
#end
#end
#end
				return o;
			}
		};
	}
	public final  <C extends ${t.className}DO> RowMapper<C>  getRowMapper(final Class<C> cls){
		return new RowMapper<C>() {
			@Override
			public C mapRow(ResultSet rs, int rowNum) throws SQLException {
				C o;
				try {
					o = cls.newInstance();
#foreach(${c} in ${t.allColumns})
#if($c.objectType ==1)
					String ${c.fieldName}Str = rs.${c.resultGetMethod}("${c.dbName}");
					if (io.grass.util.StringUtils.isNotEmpty(${c.fieldName}Str)) {
						${c.className} ${c.fieldName} = io.grass.util.XmlUtils.deserialize(${c.fieldName}Str);
						o.${c.setName}(${c.fieldName});
					}else{
#if(not $c.nullable)
						o.${c.setName}(new ${c.className}());
#else
						o.${c.setName}(null);
#end
					}
#elseif($c.objectType ==2)
					String ${c.fieldName}Str = rs.${c.resultGetMethod}("${c.dbName}");
					if (io.grass.util.StringUtils.isNotEmpty(${c.fieldName}Str)) {
						${c.className} ${c.fieldName} = io.grass.util.JsonUtils.deserialize(${c.fieldName}Str,new com.fasterxml.jackson.core.type.TypeReference<${c.className}>(){});
						o.${c.setName}(${c.fieldName});
					}else{
#if(not $c.nullable)
						o.${c.setName}(new ${c.className}());
#else
						o.${c.setName}(null);
#end
					}
#else
					o.${c.setName}(rs.${c.resultGetMethod}("${c.dbName}"));
#end
#end
					o.daoInitCompare();
					return o;
				} catch (InstantiationException | IllegalAccessException e) {
					throw new SQLException("必须实现默认构造函数",e);
				}
			}
		};
	}
#foreach(${c} in ${t.allColumns})
	public static final String ${c.fieldName}DbName = "${c.dbName}";
#end
}
